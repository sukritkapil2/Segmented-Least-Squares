"""@package Visualization
This generates a visualization for the points and segments found using the C++ coded algorithm
"""

##
# @file visualization.py
# Helps in the visualization of the input and output produced by the C++ code

import matplotlib.pyplot as plt

"""
Point Primitive Class
"""
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

"""
Line Primitive Class
"""
class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2

# Open the input and output files generated by the C++ code
points = open('points.txt')
lines = open('lines.txt')

# Read the files line by line
point_lines = points.readlines()
lines_lines = lines.readlines()

# x coordinate list
x = []

# y coordinate list
y = []

# list of segments produced
segment_list = []

# add the x and y coordinates to the respective lists
for point in point_lines:
    list = point.split(' ')
    x.append(int(list[0]))
    y.append(int(list[1]))

# add the segments to the segment_list
for segment in lines_lines:
    list = segment.split(' ')
    p1 = Point(int(list[0]), int(list[1]))
    p2 = Point(int(list[2]), int(list[3]))
    l = Line(p1, p2)
    segment_list.append(l)

# plot the segments using the matplotlib library
for segment in segment_list:
    p1 = getattr(segment, 'p1')
    p2 = getattr(segment, 'p2')

    x1 = getattr(p1, 'x')
    y1 = getattr(p1, 'y')
    x2 = getattr(p2, 'x')
    y2 = getattr(p2, 'y')

    plt.plot([x1, x2], [y1, y2])

# label x axis
plt.xlabel('x-axis')

# label y axis
plt.ylabel('y-axis')

# set title of the plot
plt.title('Segment Least Squares Visualization')

# plot the input points
plt.scatter(x, y)

# show the plot
plt.show()